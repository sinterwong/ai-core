CMAKE_MINIMUM_REQUIRED(VERSION 3.10)
IF(WITH_TRT_ENGINE)
		PROJECT(AICoreSrc VERSION ${AI_CORE_VERSION} LANGUAGES CXX CUDA)
ELSE()
		PROJECT(AICoreSrc VERSION ${AI_CORE_VERSION} LANGUAGES CXX)
ENDIF()

SET(CMAKE_POSITION_INDEPENDENT_CODE ON) 

LOAD_OPENCV()

IF (TARGET_OS STREQUAL "Android")
    LOAD_ANDROID_ENV()
    LIST(APPEND ANDROID_JIN_LIBS mediandk)
ENDIF()

SET(DEPENDENCY_INCLUDES
	${OpenCV_INCLUDE_DIRS}
)

SET(DEPENDENCY_LIBS
	encrypt::encrypt
	logger::logger
	${OpenCV_LIBS}
	${ANDROID_JIN_LIBS}
)

# Public headers
FILE(GLOB_RECURSE CURRENT_DIR_PUBLIC_HEAD ${CMAKE_CURRENT_SOURCE_DIR}/api/*.hpp) 

# Private headers
FILE(GLOB CURRENT_DIR_PRIVATE_HEAD 
		${CMAKE_CURRENT_SOURCE_DIR}/*.hpp 
		${CMAKE_CURRENT_SOURCE_DIR}/postproc/*.hpp
		${CMAKE_CURRENT_SOURCE_DIR}/preproc/*.hpp
		${CMAKE_CURRENT_SOURCE_DIR}/registrar/*.hpp
) 

FILE(GLOB CURRENT_DIR_SRCS 
		${CMAKE_CURRENT_SOURCE_DIR}/*.cpp
		${CMAKE_CURRENT_SOURCE_DIR}/postproc/*.cpp
		${CMAKE_CURRENT_SOURCE_DIR}/preproc/*.cpp
		${CMAKE_CURRENT_SOURCE_DIR}/registrar/*.cpp
)

IF(WITH_ORT_ENGINE)
	LOAD_ONNXRUNTIME()
	ADD_SUBDIRECTORY(ort)

	LIST(APPEND DEPENDENCY_INCLUDES  
		${ONNXRUNTIME_INCLUDE_DIR}
		${ONNXRUNTIME_INCLUDE_DIR}/onnxruntime 
		${CMAKE_CURRENT_SOURCE_DIR}/ort
	)
	LIST(APPEND DEPENDENCY_LIBS ${ORT_MODULE_LIBS})
	ADD_DEFINITIONS(-DWITH_ORT)
ENDIF()

IF(WITH_NCNN_ENGINE)
	LOAD_OPENMP()
	LOAD_NCNN()
	ADD_SUBDIRECTORY(ncnn)

	LIST(APPEND DEPENDENCY_INCLUDES  
		${NCNN_INCLUDE_DIR}
		${CMAKE_CURRENT_SOURCE_DIR}/ncnn
	)
	LIST(APPEND DEPENDENCY_LIBS ${NCNN_MODULE_LIBS})
	ADD_DEFINITIONS(-DWITH_NCNN)
ENDIF()

IF(WITH_TRT_ENGINE)
	LOAD_CUDA()
	LOAD_TENSORRT()
	
	SET(CMAKE_CUDA_ARCHITECTURES 87 86)

	ADD_SUBDIRECTORY(trt)

	LIST(APPEND DEPENDENCY_INCLUDES  
		${TensorRT_INCLUDE_DIR}
		${CUDAToolkit_INCLUDE_DIRS}
		${CMAKE_CURRENT_SOURCE_DIR}/trt
	)

	LIST(APPEND DEPENDENCY_LIBS ${TRT_MODULE_LIBS})
	ADD_DEFINITIONS(-DWITH_TRT)
ENDIF()

ADD_LIBRARY(ai_core SHARED 
	${CURRENT_DIR_SRCS}
	${CURRENT_DIR_PRIVATE_HEAD}
	
	# if WITH_ORT_ENGINE is ON
	$<$<BOOL:${WITH_ORT_ENGINE}>:$<TARGET_OBJECTS:ai_ort_module>>
	# if WITH_NCNN_ENGINE is ON
	$<$<BOOL:${WITH_NCNN_ENGINE}>:$<TARGET_OBJECTS:ai_ncnn_module>>
	# if WITH_TRT_ENGINE is ON
	$<$<BOOL:${WITH_TRT_ENGINE}>:$<TARGET_OBJECTS:ai_trt_module>>
)
ADD_LIBRARY(ai_core::ai_core ALIAS ai_core)

IF(WITH_TRT_ENGINE)
    MESSAGE(STATUS "Applying usage requirements from ai_trt_module to ai_core.")
    # 应用trt子模块传递来的目标属性和编译选项
    SET_TARGET_PROPERTIES(ai_core PROPERTIES ${AI_TRT_CONSUMER_PROPERTIES})
    TARGET_COMPILE_OPTIONS(ai_core PRIVATE ${AI_TRT_CONSUMER_COMPILE_OPTIONS})
ENDIF()

TARGET_INCLUDE_DIRECTORIES(ai_core
	PUBLIC
		$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>
		$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/api>
		$<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>
	PRIVATE
		${DEPENDENCY_INCLUDES}
)
TARGET_LINK_LIBRARIES(ai_core PRIVATE ${DEPENDENCY_LIBS})

INSTALL(TARGETS ai_core
    EXPORT ai_export_export_set
    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT lib
    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT lib
    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT bin
)

INSTALL(FILES ${CURRENT_DIR_PUBLIC_HEAD}
    DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/ai_core
    COMPONENT dev
)

# Generate the ai_core-config.cmake and ai_core-config-version.cmake files
WRITE_BASIC_PACKAGE_VERSION_FILE(
    "${CMAKE_CURRENT_BINARY_DIR}/ai_core-config-version.cmake"
    VERSION ${PROJECT_VERSION}
    COMPATIBILITY AnyNewerVersion
)

EXPORT(EXPORT ai_export_export_set
    FILE "${CMAKE_CURRENT_BINARY_DIR}/ai_core-targets.cmake"
    NAMESPACE ai_core::
)

CONFIGURE_FILE(
    "${CMAKE_CURRENT_SOURCE_DIR}/cmake/ai_core-config.cmake.in"
    "${CMAKE_CURRENT_BINARY_DIR}/ai_core-config.cmake"
    @ONLY
)

INSTALL(FILES
    "${CMAKE_CURRENT_BINARY_DIR}/ai_core-config.cmake"
    "${CMAKE_CURRENT_BINARY_DIR}/ai_core-config-version.cmake"
    DESTINATION ${CMAKE_INSTALL_DATADIR}
    COMPONENT dev
)

INSTALL(EXPORT ai_export_export_set
    FILE ai_core-targets.cmake
    NAMESPACE ai_core::
    DESTINATION ${CMAKE_INSTALL_DATADIR}
	COMPONENT dev
)
