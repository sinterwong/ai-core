CMAKE_MINIMUM_REQUIRED(VERSION 3.10)

PROJECT(AICoreSrc VERSION 1.0.0)

SET(CMAKE_POSITION_INDEPENDENT_CODE ON) 

LOAD_OPENCV()

SET(DEPENDENCY_INCLUDES
	${OpenCV_INCLUDE_DIRS}
)

SET(DEPENDENCY_LIBS
	common_utils::common_utils
	ai_core::ai_core
	encrypt::encrypt
	logger::logger
	${OpenCV_LIBS}
)

FILE(GLOB_RECURSE CURRENT_DIR_PUBLIC_HEAD ${CMAKE_CURRENT_SOURCE_DIR}/api/*.hpp) # Public headers
FILE(GLOB CURRENT_DIR_PRIVATE_HEAD ${CMAKE_CURRENT_SOURCE_DIR}/*.hpp ) # Private headers

FILE(GLOB CURRENT_DIR_SRCS ${CMAKE_CURRENT_SOURCE_DIR}/*.cpp)

IF(INFER_ENGINE STREQUAL NCNN)
	LOAD_OPENMP()
	LOAD_NCNN()
	LIST(APPEND DEPENDENCY_INCLUDES ${NCNN_INCLUDE_DIR})
	LIST(APPEND DEPENDENCY_LIBS ${OpenMP_CXX_FLAGS} ${NCNN_LIBS})
	ADD_COMPILE_OPTIONS(-fopenmp)
	FILE(GLOB NCNN_DIR_HEAD ${CMAKE_CURRENT_SOURCE_DIR}/ncnn/*.hpp)
	LIST(APPEND CURRENT_DIR_PRIVATE_HEAD ${NCNN_DIR_HEAD})
	FILE(GLOB NCNN_DIR_SRCS ${CMAKE_CURRENT_SOURCE_DIR}/ncnn/*.cpp ${CMAKE_CURRENT_SOURCE_DIR}/ncnn/*.cc)
	LIST(APPEND CURRENT_DIR_SRCS ${NCNN_DIR_SRCS})
	SET(INFER_ENGINE_NAME "ncnn")
	MESSAGE(INFO "Inference engine type is NCNN")
ELSEIF(INFER_ENGINE STREQUAL ORT)
	LOAD_ONNXRUNTIME()
	LIST(APPEND DEPENDENCY_LIBS ${ONNXRUNTIME_LIBS})
	LIST(APPEND DEPENDENCY_INCLUDES ${ONNXRUNTIME_INCLUDE_DIR} ${ONNXRUNTIME_INCLUDE_DIR}/onnxruntime)
	FILE(GLOB_RECURSE ORT_DIR_HEAD ${CMAKE_CURRENT_SOURCE_DIR}/ort/*.hpp)
	LIST(APPEND CURRENT_DIR_PRIVATE_HEAD ${ORT_DIR_HEAD})
	FILE(GLOB_RECURSE ORT_DIR_SRCS ${CMAKE_CURRENT_SOURCE_DIR}/ort/*.cpp ${CMAKE_CURRENT_SOURCE_DIR}/ort/*.cc)
	LIST(APPEND CURRENT_DIR_SRCS ${ORT_DIR_SRCS})
	MESSAGE(INFO "Inference engine type is ONNXRuntime")
	SET(INFER_ENGINE_NAME "ort")
ELSE()
	MESSAGE(FATAL_ERROR "Invalid inference engine type ${INFER_ENGINE}")
ENDIF()

ADD_LIBRARY(ai_core SHARED 
	${CURRENT_DIR_SRCS}
	${CURRENT_DIR_PUBLIC_HEAD}
	${CURRENT_DIR_PRIVATE_HEAD}
)
ADD_LIBRARY(ai_core::ai_core ALIAS ai_core)

TARGET_INCLUDE_DIRECTORIES(ai_core
	PUBLIC
		$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>
		$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/api>
		$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/${INFER_ENGINE_NAME}>
		$<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}/api>
	PRIVATE
		${DEPENDENCY_INCLUDES}
)
TARGET_LINK_LIBRARIES(ai_core PRIVATE ${DEPENDENCY_LIBS})

INSTALL(TARGETS ai_core
    EXPORT ai_export_export_set
    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT lib
    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT lib
    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT bin
)

INSTALL(FILES ${CURRENT_DIR_PUBLIC_HEAD}
    DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/ai_core
    COMPONENT dev
)

# Generate the ai_core-config.cmake and ai_core-config-version.cmake files
WRITE_BASIC_PACKAGE_VERSION_FILE(
    "${CMAKE_CURRENT_BINARY_DIR}/ai_core-config-version.cmake"
    VERSION ${PROJECT_VERSION}
    COMPATIBILITY AnyNewerVersion
)

EXPORT(EXPORT ai_export_export_set
    FILE "${CMAKE_CURRENT_BINARY_DIR}/ai_core-targets.cmake"
    NAMESPACE ai_core::
)

CONFIGURE_FILE(
    "${CMAKE_CURRENT_SOURCE_DIR}/cmake/ai_core-config.cmake.in"
    "${CMAKE_CURRENT_BINARY_DIR}/ai_core-config.cmake"
    @ONLY
)

INSTALL(FILES
    "${CMAKE_CURRENT_BINARY_DIR}/ai_core-config.cmake"
    "${CMAKE_CURRENT_BINARY_DIR}/ai_core-config-version.cmake"
    DESTINATION ${CMAKE_INSTALL_DATADIR}
    COMPONENT dev
)

INSTALL(EXPORT ai_export_export_set
    FILE ai_core-targets.cmake
    NAMESPACE ai_core::
    DESTINATION ${CMAKE_INSTALL_DATADIR}
	COMPONENT dev
)

# FIXME: write it as a macro for now. it would be more reasonable to change it to read from a certain file
SET(COMMIT_CODE "689bc3e3bdf1c5f2cff81725011ba7d3c0089b25")
TARGET_COMPILE_DEFINITIONS(ai_core PRIVATE SECURITY_KEY="${COMMIT_CODE}")
