# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on a single platform

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    env:
      CC: gcc-13
      CXX: g++-13

    steps:
    - name: Checkout repository and submodules
      uses: actions/checkout@v4
      with:
        submodules: 'recursive'
        lfs: true

    - name: Download and extract dependencies
      run: |
        DEST_DIR="${{ github.workspace }}/3rdparty/target/"
        OUTPUT_FILE="dependency.tgz"
        
        RELEASE_URL="https://github.com/sinterwong/ai-core/releases/download/v1.1.0-alpha/dependency-Linux_x86_64.tgz"
        
        mkdir -p "$DEST_DIR"
        
        echo "Downloading dependencies from GitHub Releases..."
        curl -L "${RELEASE_URL}" -o "${OUTPUT_FILE}"
        
        echo "Extracting dependencies..."
        tar -xzf "${OUTPUT_FILE}" -C "$DEST_DIR"
        
        echo "Dependencies installed."

    - name: Install GCC 13
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-13 g++-13
        sudo apt-get install -y ninja-build

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ github.workspace }}/build -GNinja
        -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/install
        -DBUILD_AI_CORE_TESTS=ON
        -DBUILD_AI_CORE_BENCHMARKS=ON
        -DBUILD_AI_CORE_EXAMPLES=OFF,
        -DWITH_ORT_ENGINE=ON
        -DWITH_NCNN_ENGINE=ON
        -DWITH_TRT_ENGINE=OFF
        -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Install
      run: cmake --install ${{github.workspace}}/build

    - name: Set up test env
      run: |
        echo "LD_LIBRARY_PATH=${{ github.workspace }}/install/lib:\
        ${{ github.workspace }}/build/3rdparty/encryption-tool/x86_64/lib:\
        ${{ github.workspace }}/build/3rdparty/logger/x86_64/lib:\
        ${{ github.workspace }}/3rdparty/target/Linux_x86_64/onnxruntime/lib:\
        ${{ github.workspace }}/3rdparty/target/Linux_x86_64/opencv/lib:\
        $LD_LIBRARY_PATH" >> $GITHUB_ENV

    - name: Test
      working-directory: ${{github.workspace}}/install
      run: ./tests/ai_core_tests --gtest_filter=*.*

    - name: Benchmark
      working-directory: ${{github.workspace}}/install
      run: ./benchmarks/ai_core_benchmarks
